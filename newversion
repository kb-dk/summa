#!/bin/bash
# Updates the Maven versions in modules based on the super pom.xml

MAIN_VERSION=`cat pom.xml | grep -A 1 "<artifactId>summa" | tr '\n' ' ' | sed 's/.*<version>\([^>]\+\)<\/version>.*/\1/'`
: ${VERSION:="$1"}
: ${VERSION:="$MAIN_VERSION"}

if [[ "$MAIN_VERSION" != "$VERSION" ]]; then
    echo "Setting version $VERSION for main module"
    mvn versions:set -DnewVersion=$VERSION
fi
echo "Updating child modules from main module version $VERSION"
mvn -N versions:update-child-modules -DprocessAllModules=true -DgroupId='*'

echo ""
echo "*** Important!"
echo "Due to hithero unresolved Maven problems with parent-POM-resolving the version for"
echo "the following pom.xml files cannot be updated automatically. Please open these"
echo "POMs and set the version to $VERSION"
echo $(find Web/Modules/ -iname pom.xml | tr '\n' ' ')
echo ""
echo ""
echo "*** Proposed actions (not performed automatically):"
echo "git commit -m \"Bumped to $VERSION\" pom.xml */pom.xml */*/pom.xml"

if [ "." != ".`echo $VERSION | grep SNAPSHOT`" ]; then
    exit
fi

# Real version, so we want to create a release and tag it
echo "./upload"
if [ ! -s upload.id ]; then
    echo "*** Please create the file 'upload.id' containing your SourceForge ID"
    ID="YOURSOURCEFORGEID"
else
    ID=`cat upload.id`
fi
echo "svn copy svn+ssh://${ID}@svn.code.sf.net/p/summa/code/trunk svn+ssh://${ID}@svn.code.sf.net/p/summa/code/tags/${VERSION} -m \"Release ${VERSION}\""

echo "Warning: This does not update the sub-sub modules under Web. This should be implemented"
